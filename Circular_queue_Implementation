#include <bits/stdc++.h> 
class CircularQueue{
    public:
    int *arr;
    int front;
    int rear;
    int size;

    // Initialize your data structure.
    CircularQueue(int n){
        size = n;
        arr = new int[size];
        front  = -1;
        rear = -1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        // Write your code here.
        if((front == size -1 && rear == 0)  || (rear == (front-1)%(size-1))){
            return false;
        }
        else if(front == -1){
            front = rear= 0;
        }

        else if(rear == size -1 && front != 0){
            rear = 0;
        }
        else{
            rear++;
        }

         arr[rear] = value;
         return true;

    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
        // Write your code here.

        if(front == -1) return -1; // if queue is empty 
        int ans = arr[front];
        arr[front] = -1;
        if(front == rear){
            front = rear = -1;
        }
        else if(front == size -1) front =0; // to maintain cyclic nature of queue
        else{
            front++; 
        } 
        return ans;
    }
};
