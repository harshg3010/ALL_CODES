class NumArray {
public:
vector<int> seg;
int n;

void buildTree(int i, int left, int right, vector<int>& nums){
    if(left == right) {
        seg[i] = nums[left];
        return;
    }
    int mid  = (left + right)/2;
    buildTree(2*i +1, left, mid, nums);
    buildTree(2*i +2, mid+1, right, nums);

    seg[i] = seg[2*i +1] + seg[2*i +2];
}
    NumArray(vector<int>& nums) {
         n = nums.size();
        seg.resize(n*4);
        buildTree(0, 0, n-1, nums);
    }
    
    void update(int index, int val) {
        updateUtil(0, 0, n-1, index, val);
    }

    void updateUtil(int i, int left, int right, int index, int val){
        if(left == right){
            seg[i] = val;
            return ;
        }
        int mid = (left+right)/2;
        if(index <= mid) {
            updateUtil( 2*i +1, left, mid, index, val);
        }
        else{
            updateUtil(2*i+2, mid+1, right, index, val);
        }

        seg[i] = seg[2*i+1] + seg[2*i +2];
    }

    int query(int i, int l, int r, int left, int right){
           if (right < l || left > r)
                 return 0;
        if (left <= l && r <= right)
               return seg[i];
        // partial overlap
        int mid = (l + r) / 2;
        return query(2 * i + 1, l, mid, left, right) +
               query(2 * i + 2, mid + 1, r, left, right);
    }
    
    int sumRange(int left, int right) {
        // base case
       return query(0,0,n-1, left, right);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
