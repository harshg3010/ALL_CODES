

using inorder traversal and arrays.




/* BST Node
class Node
{
   public:
    int data;
    Node *left;
    Node *right;

    Node(int x){
        data = x;
        left = NULL;
        right = NULL;
    }
}; */

class Solution {
  public:
  
  void inorder(Node* root, vector<Node*>& ans){
      if(root == NULL) return ;
      inorder(root -> left, ans);
      ans.push_back(root);
      inorder(root -> right, ans);
  }
  
  
  
    vector<Node*> findPreSuc(Node* root, int key) {
        // code here
        vector<Node*> ans;
        inorder(root, ans);
        
        vector<Node*> res(2, NULL);
        for(int i = 0; i< ans.size(); i++){
            if(ans[i] -> data == key){
                if(i>0) res[0] = ans[i-1];
                if(i < ans.size() -1) res[1] = ans[i+1];
                return res;
            }
            else if(ans[i]-> data > key){
                res[1] = ans[i];
                if(i >0) res[0] = ans[i-1];
                return res;
            }
        }
        res[0] = ans.back();
        return res;
    }
        
    
};
