/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// approach

1. the maximum width of a binary tree is how many nodes are present in each level in a complete binary tree.
2. A CBT is a tree where each node is fully filled except the last leaf nodes(means they have no children).
3. use level order traversal to keep track of each node and their positions(index) by pushing them into the queue of data type <TreeNode* , int>  where first data type is node itself.
4. find out width using formula endindex - firstindex +1;

class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*, unsigned long long>> q;
        int maxwidth  =0;
        q.push({root, 0});

        while(q.size()){
            int currlevlsize = q.size();
            unsigned long long firstidx = q.front().second;
            unsigned long long lastidx = q.back().second;

            maxwidth = max(maxwidth, (int)(lastidx - firstidx +1));

            for(int i = 0; i< currlevlsize; i++){
                auto curr = q.front();
                q.pop();
                if(curr.first -> left){
                    q.push({curr.first-> left, 2*curr.second +1});
                }
                if(curr.first -> right){
                    q.push({curr.first -> right, 2*curr.second +2});
                }
            }
        }

        return maxwidth;

        
    }
};
